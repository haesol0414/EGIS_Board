<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.board.mapper.BoardMapper">
    <!-- 일반 게시글 목록조회 -->
    <select id="selectBoardList" parameterType="map" resultType="com.example.board.vo.BoardVO">
        SELECT b.board_no       AS boardNo,
               b.create_user_id AS createUserId,
               cu.user_name     AS createUserName,
               b.update_user_id AS updateUserId,
               uu.user_name     AS updateUserName,
               b.subject,
               b.view_cnt       AS viewCnt,
               b.created_at     AS createdAt,
               b.updated_at     AS updatedAt,
               b.deleted_yn     AS deletedYn,
               b.group_no       AS groupNo,
               b.group_ord      AS groupOrd,
               b.group_dep      AS groupDep
        FROM board b
                 LEFT JOIN users cu ON b.create_user_id = cu.user_id
                 LEFT JOIN users uu ON b.update_user_id = uu.user_id
        WHERE is_notice = 'N'
        ORDER BY group_no DESC,
                 group_ord ASC,
                 created_at ASC
        LIMIT #{size} OFFSET #{offset}
    </select>
    <!-- 전체 게시글 수 검색 -->
    <select id="selectBoardTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM board
    </select>
    <!-- 게시글 상세조회 -->
    <select id="selectBoardDetail" parameterType="long" resultType="com.example.board.vo.BoardVO">
        SELECT b.board_no       AS boardNo,
               b.create_user_id AS createUserId,
               cu.user_name     AS createUserName,
               b.update_user_id AS updateUserId,
               uu.user_name     AS updateUserName,
               b.subject,
               b.content_text   AS contentText,
               b.view_cnt       AS viewCnt,
               b.created_at     AS createdAt,
               b.updated_at     AS updatedAt,
               b.deleted_yn     AS deletedYn,
               b.group_no       AS groupNo,
               b.group_ord      AS groupOrd,
               b.group_dep      AS groupDep,
               b.is_notice      AS isNotice,
               b.start_date     AS startDate,
               b.end_date       AS endDate
        FROM board b
                 LEFT JOIN users cu ON b.create_user_id = cu.user_id
                 LEFT JOIN users uu ON b.update_user_id = uu.user_id
        WHERE board_no = #{boardNo}
    </select>
    <!-- 게시글 작성 -->
    <select id="insertBoard" parameterType="com.example.board.vo.BoardVO">
        INSERT INTO board (create_user_id, subject, content_text, is_notice, start_date, end_date)
        VALUES (#{createUserId}, #{subject}, #{contentText},
                #{isNotice}, #{startDate}, #{endDate})
        RETURNING board_no
    </select>
    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="com.example.board.vo.BoardVO">
        UPDATE board
        SET update_user_id = #{updateUserId},
            subject        = #{subject},
            content_text   = #{contentText},
            updated_at     = #{updatedAt},
            is_notice      = #{isNotice},
            start_date     = #{startDate},
            end_date       = #{endDate}
        WHERE board_no = #{boardNo}
    </update>
    <!-- 게시글 삭제 -->
    <update id="deleteBoard" parameterType="long">
        UPDATE board
        SET deleted_yn = 'Y'
        WHERE board_no = #{boardNo}
    </update>
    <!-- 게시글 내 첨부 파일 삭제 -->
    <update id="deleteAttachmentsByBoardNo" parameterType="long">
        UPDATE attachments
        SET deleted_yn = 'Y'
        WHERE board_no = #{boardNo};
    </update>
    <!-- 조회수 업데이트 -->
    <update id="updateViewCnt" parameterType="long">
        UPDATE board
        SET view_cnt = view_cnt + 1
        WHERE board_no = #{boardNo}
    </update>
    <!-- 게시글 검색 -->
    <select id="selectSearchBoardList" parameterType="map" resultType="com.example.board.vo.BoardVO">
        SELECT b.board_no AS boardNo,
        b.create_user_id AS createUserId,
        cu.user_name AS createUserName,
        b.update_user_id AS updateUserId,
        uu.user_name AS updateUserName,
        b.subject,
        b.view_cnt AS viewCnt,
        b.created_at AS createdAt,
        b.updated_at AS updatedAt,
        b.deleted_yn AS deletedYn,
        b.group_no AS groupNo,
        b.group_ord AS groupOrd,
        b.group_dep AS groupDep
        FROM board b
        LEFT JOIN users cu ON b.create_user_id = cu.user_id
        LEFT JOIN users uu ON b.update_user_id = uu.user_id
        WHERE b.deleted_yn = 'N'
        <if test="filter == 'subject'">
            AND b.subject ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'contentText'">
            AND b.content_text ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'writer'">
            AND cu.user_name ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'all'">
            AND (b.subject ILIKE '%' || #{keyword} || '%' OR b.content_text ILIKE '%' || #{keyword} || '%')
        </if>
        ORDER BY b.board_no DESC
        LIMIT #{size} OFFSET #{offset}
    </select>
    <!-- 검색된 게시글 수 -->
    <select id="selectSearchTotalCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM board b
        LEFT JOIN users cu ON b.create_user_id = cu.user_id
        WHERE b.deleted_yn = 'N'
        <if test="filter == 'subject'">
            AND b.subject ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'contentText'">
            AND b.content_text ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'writer'">
            AND cu.user_name ILIKE '%' || #{keyword} || '%'
        </if>
        <if test="filter == 'all'">
            AND (b.subject ILIKE '%' || #{keyword} || '%' OR b.content_text ILIKE '%' || #{keyword} || '%')
        </if>
    </select>
    <!-- 답글 삽입 위치 확인 -->
    <select id="findNextGroupOrd" resultType="int">
    <![CDATA[
        SELECT COALESCE(MIN(group_ord), 0)
        FROM board
        WHERE group_no = #{groupNo}
          AND group_ord > #{groupOrd}
          AND group_dep <= #{groupDep};
        ]]>
    </select>
    <!-- 최대 group_ord 가져오기 (그룹 내 마지막 위치 계산) -->
    <select id="findMaxGroupOrd" resultType="int">
        SELECT COALESCE(MAX(group_ord), 0) + 1
        FROM board
        WHERE group_no = #{groupNo};
    </select>
    <!-- 기존 글 순서 밀어내기-->
    <update id="updateGroupOrd">
        UPDATE board
        SET group_ord = group_ord + 1
        WHERE group_no = #{groupNo}
          AND group_ord >= #{groupOrd};
    </update>
    <!-- 답글 작성 -->
    <select id="insertReply" parameterType="com.example.board.vo.BoardVO">
        INSERT INTO board (create_user_id, subject, content_text, group_no, group_ord, group_dep)
        VALUES (#{createUserId}, #{subject}, #{contentText}, #{groupNo}, #{groupOrd}, #{groupDep})
        RETURNING board_no
    </select>
    <!-- 첨부파일 저장 -->
    <insert id="insertFiles" parameterType="list">
        INSERT INTO attachments (
        board_no,
        origin_file_name,
        file_name,
        file_path,
        file_size
        ) VALUES
        <foreach collection="list" item="file" separator=",">
            (
            #{file.boardNo},
            #{file.originFileName},
            #{file.fileName},
            #{file.filePath},
            #{file.fileSize}
            )
        </foreach>
    </insert>
    <!-- 특정 게시글의 파일 조회 -->
    <select id="selectFilesByBoardNo" parameterType="long" resultType="com.example.board.vo.FileVO">
        SELECT attachment_id,
               board_no,
               origin_file_name,
               file_name,
               file_path,
               file_size,
               uploaded_at,
               deleted_yn
        FROM attachments
        WHERE board_no = #{boardNo}
          AND deleted_yn = 'N';
    </select>
    <!--  첨부파일 삭제  -->
    <update id="deleteFilesByIds" parameterType="java.util.List">
        UPDATE attachments
        SET deleted_yn = 'Y'
        WHERE attachment_id IN
        <foreach item="deletedFileIds" collection="list" open="(" separator="," close=")">
            #{deletedFileIds}
        </foreach>
    </update>
    <!-- 파일 아이디로 파일 조회  -->
    <select id="selectFileById" parameterType="long" resultType="com.example.board.vo.FileVO">
        SELECT attachment_id,
               board_no,
               origin_file_name,
               file_name,
               file_path,
               file_size,
               uploaded_at,
               deleted_yn
        FROM attachments
        WHERE attachment_id = #{attachmentId};
    </select>
    <!-- 답글 여부 확인 -->
    <select id="checkHasReplies" resultType="boolean">
        SELECT EXISTS (SELECT 1
                       FROM board
                       WHERE group_no = #{groupNo}
                         AND group_ord > #{groupOrd}
                         AND group_dep > #{groupDep}
                         AND deleted_yn = 'N')
    </select>
    <!-- 공지사항 리스트 -->
    <select id="findNotices" resultType="com.example.board.vo.BoardVO">
        <![CDATA[
        SELECT b.board_no       AS boardNo,
               b.create_user_id AS createUserId,
               cu.user_name     AS createUserName,
               b.update_user_id AS updateUserId,
               uu.user_name     AS updateUserName,
               b.subject,
               b.content_text   AS contentText,
               b.view_cnt       AS viewCnt,
               b.created_at     AS createdAt,
               b.updated_at     AS updatedAt,
               b.deleted_yn     AS deletedYn,
               b.is_notice      AS isNotice,
               b.start_date     AS startDate,
               b.end_date       AS endDate
        FROM board b
                 LEFT JOIN users cu ON b.create_user_id = cu.user_id
                 LEFT JOIN users uu ON b.update_user_id = uu.user_id
        WHERE is_notice = 'Y'
          AND (end_date IS NULL OR end_date >= NOW())
          AND (start_date IS NULL OR start_date <= NOW())
        ORDER BY created_at ASC
        ]]>
    </select>
</mapper>